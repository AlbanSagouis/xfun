% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/packages.R
\name{rev_check}
\alias{rev_check}
\title{Run \command{R CMD check} on the reverse dependencies of a package}
\usage{
rev_check(pkg, recheck = FALSE, ignore = NULL, note = TRUE, update = TRUE, 
    src = file.path(src_dir, pkg), src_dir = getOption("xfun.rev_check.src_dir"))
}
\arguments{
\item{pkg}{The package name.}

\item{recheck}{Whether to only check the failed packages from last time. By
default, if there are any \file{*.Rcheck} directories, \code{recheck} will
be automatically set to \code{TRUE} if missing.}

\item{ignore}{A vector of package names to be ignored in \command{R CMD
check}. If this argument is missing and a file \file{00ignore} exists, the
file will be read as a character vector and passed to this argument.}

\item{note}{Whether to treat \verb{NOTE} in the check log as failure.
\verb{WARNING} and \verb{ERROR} are always treated as failure.}

\item{update}{Whether to update all packages before the check.}

\item{src}{The path of the source package directory.}

\item{src_dir}{The parent directory of the source package directory. This can
be set in a global option if all your source packages are under a common
parent directory.}
}
\description{
Install the source package, figure out the reverse dependencies on CRAN,
download all of their source packages, and run \command{R CMD check} on them
in parallel.
}
\details{
Everything occurs under the current working directory, and you are
recommended to call this function under a separate directory, especially when
the number of reverse dependencies is large, because all source packages will
be downloaded to this directory, and all \file{*.Rcheck} directories will be
generated under this directory, too.

If a source tarball of the expected version exists in the current directory,
it will not be downloaded again (to save time and bandwidth).

After a package has been checked, the associated \file{*.Rcheck} directory
will be deleted if the check was successful (no warnings or errors, and
optionally, no notes), which means if you see a \file{*.Rcheck} directory, it
means the check failed, and you need to take a look at the log files under
that directory.

The time to finish the check is recorded for each package. As the check goes
on, the total remaing time will be roughly estimated via \code{n *
mean(times)}, where \code{n} is the number of packages remaining to be
checked, and \code{times} is a vector of elapsed time of packages that have
been checked.

A recommended workflow is to use a special directory to run
\code{rev_check()}, set the global \code{\link{options}}
\code{xfun.rev_check.src_dir} and \code{repos} in the R startup (see
\code{?\link{Startup}}) profile file \code{.Rprofile} under this directory,
and (optionally) set \code{R_LIBS_USER} in \file{.Renviron} to use a special
library path (so that your usual library will not be cluttered). Then run
\code{xfun::rev_check(pkg)} once, investigate and fix the problems or (if you
believe it was not your fault) ignore broken packages in the file
\file{00ignore}, and run \code{xfun::rev_check(pkg)} again to recheck the
failed packages. Repeat this process until all \file{*.Rcheck} directories
are gone.

As an example, I set \code{options(repos = c(CRAN =
'https://cran.rstudio.com'), xfun.rev_check.src_dir = '~/Dropbox/repo')} in
\file{.Rprofile}, and \code{R_LIBS_USER=~/R-tmp} in \file{.Renviron}. Then I
can run, for example, \code{xfun::rev_check('knitr')} repeatedly under a
special directory \file{~/Downloads/revcheck}. Reverse dependencies and their
dependencies will be installed to \file{~/R-tmp}, and \pkg{knitr} will be
installed from \file{~/Dropbox/repo/kintr}.
}
\seealso{
\code{devtools::revdep_check()} is more sophisticated, but currently
  has a few major issues that affect me: (1) It always deletes the
  \file{*.Rcheck} directories
  (\url{https://github.com/hadley/devtools/issues/1395}), which makes it
  difficult to know more information about the failures; (2) It does not
  fully install the source package before checking its reverse dependencies
  (\url{https://github.com/hadley/devtools/pull/1397}); (3) I feel it is
  fairly difficult to iterate the check (ignore the successful packages and
  only check the failed packages); by comparison, \code{xfun::rev_check()}
  only requires you to run a short command repeatedly (failed packages are
  indicated by the existing \file{*.Rcheck} directories, and automatically
  checked again the next time).

  \code{xfun::rev_check()} borrowed a very nice feature from
  \code{devtools::revdep_check()}: estimating and displaying the remaining
  time. This is particularly useful for packages with huge numbers of reverse
  dependencies.
}
